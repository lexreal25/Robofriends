{"version":3,"sources":["Card.js","CardList.jsx","SearchBox.jsx","Scroll.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","name","email","ephissians","id","className","alt","src","CardList","cardComponent","robots","map","user","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","onSearchChange","event","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredRobots","filter","robot","toLowerCase","includes","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"gOAeeA,G,MAbF,SAAC,GAAkC,IAAjCC,EAAgC,EAAhCA,KAAMC,EAA0B,EAA1BA,MAAMC,EAAoB,EAApBA,WAAYC,EAAQ,EAARA,GACnC,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,mBACrB,6BACI,4BAAKH,GACL,2BAAIC,GACJ,2BAAIC,OCgBLK,EAtBE,SAAC,GAAc,IAMtBC,EANqB,EAAZC,OAMcC,KAAI,SAACC,EAAMR,GACtC,OACE,kBAAC,EAAD,eACIS,IAAKT,GACDQ,OAKZ,OACI,6BACKH,ICJEK,EAdG,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAChB,OACI,yBAAKV,UAAU,OACP,2BACIA,UAAU,mCACVW,KAAK,SACLf,KAAK,cACLgB,YAAY,aACZC,SAAUH,MCCfI,EATA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAU,SACnBC,OAAO,kBACPC,OAAO,UACNJ,EAAMK,WC4CJC,E,kDA3Cb,aAAc,IAAD,8BACX,gBAcFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACC,YAAaF,EAAMG,OAAOC,SAdzC,EAAKC,MAAO,CACVvB,OAAQ,GACRoB,YAAY,IAJH,E,gEAQO,IAAD,OACjBI,MAAM,8CACLC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAE1BF,MAAK,SAAAG,GAAU,EAAKT,SAAS,CAACnB,OAAO4B,S,+BAQ/B,IAAD,EACuBC,KAAKN,MAA5BvB,EADA,EACAA,OAAQoB,EADR,EACQA,YACRU,EAAiB9B,EAAO+B,QAAO,SAAAC,GACnC,OAAOA,EAAMzC,KAAK0C,cAAcC,SAASd,EAAYa,kBAEtD,OAAQjC,EAAOmC,OAGd,yBAAKxC,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWU,aAAcwB,KAAKZ,iBAC9B,kBAAC,EAAD,KAEI,kBAAC,EAAD,CAAUjB,OAAQ8B,MAPxB,2C,GA3BYM,a,MCKEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.056f2910.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Card = ({name, email,ephissians, id}) => {\r\n    return (\r\n        <div className=\"bg-light-green tc dib br3 pa3 ma1 grow bw2 shadow-5\">\r\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`}/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{email}</p>\r\n                <p>{ephissians}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card;","import React from 'react'\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n  /*\r\n  if(true){\r\n    throw new Error('nooo')\r\n  }\r\n  */\r\n    const cardComponent = robots.map((user, id) => {\r\n      return  (\r\n        <Card \r\n            key={id}  \r\n            {...user}\r\n        />\r\n      )\r\n    })\r\n\r\n    return (\r\n        <div>\r\n            {cardComponent}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList\r\n","import React from 'react'\r\n\r\nconst SearchBox = ({searchChange}) => {\r\n    return (\r\n        <div className=\"pa2\">\r\n                <input\r\n                    className='pa3 ba b--green bg-lightest-blue' \r\n                    type='search' \r\n                    name='searchField'\r\n                    placeholder='Search Box'\r\n                    onChange={searchChange}\r\n                />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchBox","import React from 'react'\r\n\r\nconst Scroll = (props) => {\r\n    return (\r\n        <div style={{overflowY:'scroll', \r\n            border:'1px solid black',\r\n            height:'800px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\nexport default Scroll","import React, { Component } from 'react';\nimport './containers/App.css';\nimport CardList from './CardList';\nimport SearchBox from './SearchBox'\nimport Scroll from './Scroll'\n\n\nclass App extends Component{\n  constructor(){\n    super()\n    this.state ={\n      robots: [],\n      searchField:''\n    }\n  }\n\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n\n    .then(users => {this.setState({robots:users})})\n  }\n\n  onSearchChange = (event) => {\n    this.setState({searchField: event.target.value})\n  }\n\n\n  render(){\n    const{robots, searchField} = this.state\n    const filteredRobots = robots.filter(robot => {\n      return robot.name.toLowerCase().includes(searchField.toLowerCase())\n    })\n     return !robots.length ? \n      <h1>Loading</h1> :\n    (\n      <div className='tc'>\n        <h1 className='f1'>robofriends</h1>\n        <SearchBox searchChange={this.onSearchChange}/>\n        <Scroll>\n      \n            <CardList robots={filteredRobots}/>\n        </Scroll>\n      </div>\n  );\n    }\n  }\n\n\n \n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}